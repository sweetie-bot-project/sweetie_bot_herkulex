# DEPLOY BASIC HERKULEX_* SUBSYSTEM 

import("rtt_ros");
ros.import("rtt_rospack");
ros.import("sweetie_bot_herkulex_control");

# LOAD HERKULEX_* COMPONENTS

loadComponent("herk_array","herkulex::HerkulexArray");
loadService("herk_array", "marshalling");
herk_array.marshalling.loadProperties(ros.find("sweetie_bot_herkulex_control") + "/scripts/test_servo_array.cpf");

loadComponent("herk_driver","herkulex::HerkulexDriver");
herk_driver.port_name = "/dev/ttyUSB0";
herk_driver.baudrate = 115200;

loadComponent("herk_sched","herkulex::HerkulexSched");
herk_sched.poll_list = strings("servo1", "servo2");
herk_sched.poll_round_size = 1;
herk_sched.detailed_state = true;

# CONNECT OPERATIONS OF HERKULEX_* subsystem

connectOperations("herk_array.sendPacketCM", "herk_sched.sendPacketCM");
connectOperations("herk_sched.receivePacketCM", "herk_array.receivePacketCM");
connectOperations("herk_sched.sendPacketDL", "herk_driver.sendPacket");
connectOperations("herk_driver.receivePacket", "herk_sched.receivePacketDL");
connectServices("herk_array","herk_sched");
stream("herk_array.out_states", ros.comm.topic("/herkulex/servo_states"))
stream("herk_array.commands", ros.comm.topic("/herkulex/servo_commands"))

stream("herk_sched.out_states", ros.comm.topic("/herkulex/joint_states"))

# Scheduler waits for completion of JOG command if those operations are connected.
# connectOperations("herk_sched.waitSendPacketDL", "herk_driver.waitSendPacket");

# TIME PERIODS CONFIGURATION

# How long should scheduler wait for response during RT operations?
herk_sched.timeout = 0.010;
# Scheduler has 2 ms to send JOG packets. Actual exchange may last longer. 
# Beware situation where JOG send eats up time of next request operation.
herk_sched.period_RT_JOG = 0.005;
# Scheduler has 10 ms to send RT read request. Actual exchange may last for (period_RT + timeout).
herk_sched.period_RT_read = 0.001;
# Scheduler has 2 ms to forward request packets from CM interface to HerkulexDriver.
# Actual exchange may lasts until begining of RT_JOG round (period-(period_RT+timeout).
herk_sched.period_CM = 0.001;
# Main discretization period (control cycle).
# To prevent possible ACK packet clashes 
# it must be larger then (period_RT + timeout + period_CM + timeout).
var double TIMER_PERIOD = 0.023;
# HerkulexArray timeout must be large then control cycle.
herk_array.timeout = 0.05;
# HerkulexArray detailed state message
herk_array.detailed_state = true;

# SETUP TIMER

loadComponent("herk_timer", "OCL::TimerComponent");
# timer_0 notifies herkulex_sched about begining of contril cycle.
connect("herk_timer.timer_0", "herk_sched.sync", ConnPolicy());
herk_array.setPeriod(0.056);

herk_timer.startTimer(0, TIMER_PERIOD); 
# timer_1 notifies file reader. It has 50% period shift to prevent races.
herk_timer.wait(1, TIMER_PERIOD/2);
herk_timer.startTimer(1, TIMER_PERIOD); 

# START HERKULEX_* SUBSYSTEM (without scheduler)

herk_driver.configure;
# Driver must be active when arraty is configurated.
herk_driver.start;

herk_sched.configure();
herk_array.configure();
herk_array.start();
